Y <- makeCacheMatrix(matrix(1:8,2,4))
Y<-makeCacheMatrix(matrix(1:8,2,4))
Y<-makeCachematrix(matrix(1:8,2,4))
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4)
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
source("cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4)
pmatrix <- makeCacheMatrix(matrix(1:16, nrow=4, ncol=4))
pmatrix$get()
pmatrix$getInverse()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=4, ncol=4)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=4, ncol=4))
pmatrix$get()
cacheSolve(pmatrix)
source("cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
pmatch$get()
pmatrix$get()
pmatrix$getInverse()
cacheSolve(pmatrix)
mat <- x$get()
##Solution starts from here
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() {x}
setInverse <- function(inverse) {inv <<- inverse}
getInverse <- function() {inv}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
